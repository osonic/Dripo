C51 COMPILER V9.52.0.0   SMBUS                                                             12/14/2013 12:17:47 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SMBUS
OBJECT MODULE PLACED IN SMBus.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe SMBus.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          #include "compiler_defs.h"
   2          #include "C8051F300_defs.h"
   3          #include "SMBus.h"
   4          #include <stdio.h>
   5          
   6          #define MAX_SMB_BUFFER_SIZE 4
   7                
   8          unsigned char _target_addr = 0;
   9          unsigned char _data_out_size = 0;
  10          unsigned char _data_out_ptr = 0;
  11          
  12          unsigned char _smb_data_out[MAX_SMB_BUFFER_SIZE];
  13          unsigned char _smb_data_in;
  14          
  15          bit _smb_busy = 0;
  16          
  17          bit _smb_rw = WRITE;
  18          
  19          
  20          
  21          bit smb_is_busy()
  22          {
  23   1          if ((SMB0CF & 0x20) == 0x20)
  24   1          {
  25   2              return 1;
  26   2          }
  27   1          else
  28   1          {
  29   2              return 0;
  30   2          }
  31   1      }
  32          
  33          // !!!Multi bytes!!!
  34          bit write_smb_data(unsigned char target_addr, unsigned char * data_out, unsigned data_out_size)
  35          {
  36   1          unsigned char i = 0;
  37   1          //SMB0DAT = 0;
  38   1          if (data_out_size > MAX_SMB_BUFFER_SIZE)
  39   1          {
  40   2              return 0;
  41   2          }
  42   1          for (i = 0; i < data_out_size; i++)
  43   1          {
  44   2              _smb_data_out[i] = data_out[i];
  45   2          }
  46   1          _data_out_ptr = 0;
  47   1          _data_out_size = data_out_size;
  48   1          
  49   1          _smb_rw = WRITE;
  50   1          _target_addr = target_addr << 1;
  51   1          _target_addr &= 0xFE; 
  52   1          _target_addr |= _smb_rw; 
  53   1          
  54   1      
  55   1      
C51 COMPILER V9.52.0.0   SMBUS                                                             12/14/2013 12:17:47 PAGE 2   

  56   1          while (_smb_busy);
  57   1          _smb_busy = 1;
  58   1          STA = 1;
  59   1          while (_smb_busy);
  60   1          return 1;
  61   1      }
  62          
  63          // !!!Single byte!!!
  64          unsigned char read_smb_byte(unsigned char target_addr)
  65          {
  66   1          //SMB0DAT = 0;
  67   1          _smb_rw = READ;
  68   1          _target_addr = target_addr << 1;
  69   1          _target_addr &= 0xFE; 
  70   1          _target_addr |= _smb_rw; 
  71   1      
  72   1          while (_smb_busy);
  73   1          STA = 1;
  74   1          while (_smb_busy);
  75   1          return _smb_data_in;
  76   1      }
  77          
  78          unsigned char c = 0;
  79          void SMBus_ISR(void) interrupt INTERRUPT_SMBUS0
  80          {
  81   1          if (ARBLOST == 1) // ARB error occurred       
  82   1          {
  83   2              SMB0CF &= ~0x80;                 // Reset communication
  84   2              SMB0CF |= 0x80;
  85   2              STA = 0;
  86   2              STO = 0;
  87   2              ACK = 0;
  88   2              _smb_busy = 0;
  89   2              return;             // quit on error
  90   2          }
  91   1          
  92   1          switch (SMB0CN & 0xF0)           // Status vector
  93   1          {
  94   2              // Master Transmitter(including transmitting addr when read): START condition transmitted.
  95   2              case SMB_MTSTA:  //1110:0000
  96   2              {
  97   3                  SMB0DAT = _target_addr;
  98   3                  STA = 0;                   // Manually clear START bit
  99   3                  break;
 100   3              }
 101   2              // Master Transmitter: Data byte transmitted
 102   2              case SMB_MTDB:  //1100:0000
 103   2              {
 104   3                  if (ACK)                   // Slave ACK?
 105   3                  {
 106   4                      if (_smb_rw == WRITE)
 107   4                      {
 108   5                          if (_data_out_ptr < _data_out_size) // If this transfer is a WRITE,
 109   5                          {
 110   6                              // send data byte
 111   6                              SMB0DAT = _smb_data_out[_data_out_ptr];
 112   6                              _data_out_ptr++;
 113   6                          }
 114   5                          else // If this transfer is a READ,
 115   5                          {
 116   6                              STO = 1; 
 117   6                              _smb_busy = 0;
C51 COMPILER V9.52.0.0   SMBUS                                                             12/14/2013 12:17:47 PAGE 3   

 118   6                          } 
 119   5                      }  
 120   4      
 121   4                  }
 122   3                  else                       // If slave NACK,
 123   3                  {
 124   4                      STO = 1;                // Send STOP condition, followed
 125   4                      printf("NACK\n");
 126   4                      _smb_busy = 0;
 127   4                  }
 128   3                  break;
 129   3              }
 130   2              // Master Receiver: byte received
 131   2              case SMB_MRDB:   //1000:0000
 132   2              {
 133   3                  _smb_data_in = SMB0DAT;     // Store received byte
 134   3      
 135   3                  ACK = 0;                   // Send NACK to indicate last byte
 136   3                                             // of this transfer
 137   3      
 138   3                  STO = 1;                   // Send STOP to terminate transfer
 139   3                  _smb_busy = 0;
 140   3                  break;
 141   3              }
 142   2              default:
 143   2              {
 144   3                  //printf("Error!\n");
 145   3                  printf("Error\n");
 146   3                  _smb_busy = 0;
 147   3                  break;
 148   3              }
 149   2          } // end switch
 150   1          SI = 0;                             // Clear interrupt flag
 151   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    280    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
